#!/usr/local/bin/python3
"""
Character.py - Class definition for RPG Characters

Written by Bruce Fuda for Intermediate Programming
Python RPG Assignment 2014
"""

# import required Python modules
import time
import random

######
### Define the attributes and methods available to all characters in the Character
### Superclass. All characters will be able to access these abilities.
### Note: All classes should inherit the 'object' class.
######

class Character:
  """ Defines the attributes and methods of the base Character class """
  
  def __init__(self, char_name, app):
    """ Parent constructor - called before child constructors """
    self.attack_mod = 1.0
    self.defense_mod = 1.0
    self.name = char_name
    self.shield = 0
    self.max_shield = 75
    self.app = app
    
    self.player_starting_xp = 0
    self.player_xp = self.player_starting_xp

    self.player_starting_mana_ability = False
    self.player_starting_shield_ability = False
    self.player_starting_fire_ability = False

    self.player_mana_ability = self.player_starting_mana_ability
    self.player_shield_ability = self.player_starting_shield_ability
    self.player_fire_ability = self.player_starting_fire_ability

  def __str__(self):
    """ string representation of character """
    return str("You are " + self.name + " the " + self.__class__.__name__)

  def move(self, player):
    """
    Defines any actions that will be attempted before individual
    character AI kicks in - applies to all children
    """
    move_complete = False
    if self.health < 50 and self.potions > 0:
      self.set_stance('d')
      self.use_potion()
      move_complete = True
    return move_complete 

#### Character Attacking Actions ####

  def set_stance(self, stance_choice):
    """ sets the fighting stance based on given parameter """
    
    if stance_choice == "a":
      self.attack_mod = 2.3
      self.defense_mod = 1.6
      self.app.write(self.name + " chose aggressive stance.")

    elif stance_choice == "d":
      self.attack_mod = 1.6
      self.defense_mod = 2.3
      self.app.write(self.name + " chose defensive stance.")

    else:
      self.attack_mod = 2.0
      self.defense_mod = 2.0
      self.app.write(self.name + " chose balanced stance.")
    self.app.write("")

  def attack_enemy(self, target):
    ''' Attacks the targeted enemy. Accepts a Character object as the parameter (enemy
    to be targeted). Returns True if target killed, False if still alive.'''

    attack_roll = random.randint(5,20)#number from 1 to 20
    hit = int(attack_roll * self.attack_mod * self.attack)
    self.app.write(self.name + " attacks " + target.name + ".")
    time.sleep(1)

    crit_roll = random.randint(1, 10)#critical damage
    if crit_roll == 10: #10% chance of double damage
      hit = hit*2
      self.app.write(self.name + " scores a critical hit! Double damage inflicted!!")
      time.sleep(1)

    kill,counter = target.defend_attack(hit) #returns true or false if enemy dies
    time.sleep(1)

    if counter:
      self.app.write(target.name + " successfully manages to counter the attack against " + self.name)
      target.attack_enemy(self)
      time.sleep(1)

    if kill:
      self.app.write(self.name + " has killed " + target.name + ".") #prints character has killed enemy
      self.app.write("")
      time.sleep(1)
      return True      
    else:
      return False

  def defend_attack(self, att_damage):
    ''' Defends an attack from the enemy. Accepts the "hit" score of the attacking enemy as
    a parameter. Returns True is character dies, False if still alive.'''

    counter = False
    
    # defend roll
    defend_roll = random.randint(1, 20)#number from 1 to 20
    block = int(defend_roll * self.defense_mod * self.defense)
        
    # Roll for block - must roll a 10 (10% chance)
    block_roll = random.randint(1, 10)
    if block_roll == 10:
      self.app.write(self.name + " successfully blocks the attack!")
      block = att_damage #blocks all damage
      time.sleep(1)
      counter_chance = random.randint(1,2)
      if counter_chance == 1:
        counter = True

    # Calculate damage from attack
    damage = att_damage - block
    if damage < 0:
      damage = 0

    # If character has a shield, shield is depleted, not health
    if self.shield > 0:
      # Shield absorbs all damage if shield is greater than damage
      if damage <= self.shield:
        self.app.write(self.name + "'s shield absorbs " + str(damage) + " damage.")
        time.sleep(1)
        self.shield = self.shield - damage
        damage = 0
      # Otherwise some damage will be sustained and shield will be depleted
      elif damage != 0:
        self.app.write(self.name + "'s shield absorbs " + str(self.shield) + " damage.")
        time.sleep(1)
        damage = damage - self.shield
        self.shield = 0
      
    # Reduce health
    self.app.write(self.name + " suffers " + str(damage) + " damage!")
    self.health = self.health - damage
    time.sleep(1)
      
    # Check to see if dead or not
    if self.health <= 0:
      self.health = 0
      self.app.write(self.name + " is dead!")
      self.app.write("")
      time.sleep(1)
      return (True, counter)
    else:
      self.app.write(self.name + " has " + str(self.health) + " hit points left")
      self.app.write("")
      time.sleep(1)
      return (False, counter)

#### Character Magic Actions ####

  def valid_spell(self, choice):
    ''' Checks to see if the spell being cast is a valid spell i.e. can be cast by
    that race and the character has enough mana '''

    valid = False

    # Determine this character's race
    # This is a built-in property we can use to work out the
    # class name of the object (i.e. their race)
    race = self.__class__.__name__
    #checks if player has enough mana to use spell
    if choice == 1:
      if race == "Wizard" or race == "Devil" or race == "God" and self.mana >= 10 and self.player_fire_ability == True:
        valid = True
    elif choice == 2 and self.mana >= 20 and self.player_shield_ability == True:
      valid = True
    elif choice == 3:
      if race == "Wizard" or race == "Devil" or race == "God" and self.player_mana_ability == True:
        valid = True
        
    return valid

  def cast_spell(self, choice, target=False): #target is false if not target
    ''' Casts the spell chosen by the character. Requires 2 parameters - the spell
    being cast and the target of the spell. '''

    kill = False;

    if choice == 1: #cast fireball
      kill = self.cast_fireball(target)
    elif choice == 2:#cast shield
      self.cast_shield()
    elif choice == 3:#cast mana drain
      self.cast_mana_drain(target)
    else:#if character is not capable of using specific magic
      self.app.write("Invalid spell choice. Spell failed!")
      self.app.write("")

    return kill #return true or false

  def cast_fireball(self, target):
    self.mana -= 10
    self.app.write(self.name + " casts Fireball on " + target.name + "!")#prints you attack enemy with fireball
    time.sleep(1)
      
    roll = random.randint(10, 16) #random number from 1 up to 10
    defense_roll = random.randint(1, 10) #random number from 1 up to 10
    damage = int(roll * self.magic) - int(defense_roll * target.resistance) #.magic and .resistance in character constructor method
    if damage < 0:
      damage = 0
      
    if target.shield > 0: #takes away shield health first
      if damage <= target.shield: #if damage wipes partial sheild health
        self.app.write(target.name + "'s shield absorbs " + str(damage) + " damage.")
        time.sleep(1)
        target.shield = target.shield - damage #removes shield health
        damage = 0
      elif damage != 0: # if damage is greater than target shield
        self.app.write(target.name + "'s shield absorbs " + str(target.shield) + " damage.")
        time.sleep(1)
        damage = damage - target.shield #removes damage that is absorbed by shield
        target.shield = 0 #wipes all shield health
                        
    self.app.write(target.name + " takes " + str(damage) + " damage.")
    self.app.write("")
    time.sleep(1)
    target.health = target.health - damage #remain damage inflicted on enemy
      
    if target.health <= 0: #if target dies
      target.health = 0
      self.app.write(target.name + " is dead!")
      self.app.write("")
      time.sleep(1)
      return True

    else: #prints how much life remains
      self.app.write(target.name + " has " + str(target.health) + " hit points left")
      self.app.write("")
      time.sleep(1)
      return False

  def cast_shield(self):
    self.mana -= 20
    self.app.write(self.name + " casts Shield!")
    time.sleep(1)
    if self.shield <= self.max_shield: #takes away excessive shield
      self.shield = self.max_shield #sets to max shield
    self.app.write(self.name + " is shielded from the next " + str(self.shield) + " damage.")
    self.app.write("")
    time.sleep(1)

  def cast_mana_drain(self, target):
    self.app.write(self.name + " casts Mana Drain on " + target.name + "!")
    time.sleep(1)

    if target.mana >= 20: #checks if enemy has more than 20 mana
      drain = 20
    else:
      drain = target.mana #takes away the rest of enemies mana
    self.app.write(self.name + " drains " + str(drain) + " mana from "+ target.name + ".")
    time.sleep(1)
      
    target.mana -= drain #removes enemy mana 
    self.mana += drain #adds enemy mana to player
    if target.mana <= 0: #sets mana to 0 if mana is negative
      target.mana = 0
      self.app.write(target.name + "'s mana has been exhausted!")
    else:
      self.app.write(target.name + " has " + str(target.mana) + " mana left")
    self.app.write("")

    def special_ability(self,mana,target):
      pass

#### Character Item Actions ####

  def use_potion(self):
    """
    Uses a health potion if the player has one and needs one. Returns True if has potion,
    false if hasn't or does not need one
    """
    if self.potions >= 1: #checks if player has potions
      if self.health < self.max_health:#checks if player needs potion
        self.potions -= 1
        self.health += 250
        if self.health > self.max_health:#removes excessive health
          self.health = self.max_health
        self.app.write(self.name + " uses a potion!")
        time.sleep(1)
        self.app.write(self.name + " has " + str(self.health) + " hit points.")
        self.app.write("")
        time.sleep(1)
        return True
      else:#do not need potion
        self.app.write("You do not need a potion")
        self.app.write("")
        return False
    else:#do not need potion and has no potion
      self.app.write("You have no potions left!")
      if self.health == self.max_health: 
        self.app.write("And you do not need a potion")
      self.app.write("")
      return False

  def use_elixer(self):
    if self.elixers >= 1:
      if self.mana < self.max_mana:
        self.elixers -= 1
        self.mana += 100
        if self.mana > self.max_mana:
          self.mana = self.max_mana
        self.app.write(self.name + " uses an elixer!")
        time.sleep(1)
        self.app.write(self.name + " has " + str(self.mana) + " mana points.")
        self.app.write("")
        time.sleep(1)
        return True
      else:
        self.app.write("You do not need an elixer")
        self.app.write("")
        return False
    else:
      self.app.write("You have no elixers left!")
      if self.mana == self.max_mana:
        self.app.write("And you do not need an exlixer")
      self.app.write("")
      return False 
    
#### Miscellaneous Character Actions ####

  def reset(self):
    ''' Resets the character to its initial state '''
    
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.shield = 0

    self.player_starting_xp = 0
    self.player_xp = self.player_starting_xp

    self.player_mana_ability = self.player_starting_mana_ability
    self.player_shield_ability = self.player_starting_shield_ability
    self.player_fire_ability = self.player_starting_fire_ability
    
  def print_status(self):
    ''' Prints the current status of the character '''
    self.app.write(self.name + "'s Status:")
    time.sleep(0.5)
    
    health_bar = "Health: "
    health_bar += "|"
    i = 0
    while i <= self.max_health:#prints # for every 25 health
      if i <= self.health:
        health_bar += "#"
      else:
        health_bar += " "
      i += 25
    health_bar += "| " + str(self.health) + " hp (" + str(int(self.health*100/self.max_health)) +"%)" #prints health and health percentage of total health
    self.app.write(health_bar)
    time.sleep(0.5)
        
    if self.max_mana > 0:#prints if mana exists
      mana_bar = "Mana: "
      mana_bar += "|"
      i = 0
      while i <= self.max_mana:#prints * for every 10 mana
        if i <= self.mana:
          mana_bar += "*"
        else:
          mana_bar += " "
        i += 10
      mana_bar += "| " + str(self.mana) + " mp (" + str(int(self.mana*100/self.max_mana)) +"%)"
      self.app.write(mana_bar)
      time.sleep(0.5)
   
    if self.shield > 0:#prints if shield exists
      shield_bar = "Shield: "
      shield_bar += "|"
      i = 0
      while i <= 100:# prints o for every 10 shield
        if i <= self.shield:
          shield_bar += "o"
        else:
          shield_bar += " "
        i += 10
      shield_bar += "| " + str(self.shield) + " sp (" + str(int(self.shield*100/self.max_shield)) +"%)"
      self.app.write(shield_bar)
      time.sleep(0.5)   

    self.app.write("Potions remaining: " + str(self.potions))
    self.app.write("")
    time.sleep(0.5)

######
### Define the attributes specific to each of the Character Subclasses.
### This identifies the differences between each race.
######

class Dwarf(Character):
  '''Defines the attributes of a Dwarf in the game. Inherits the constructor and methods
  of the Character class '''
  
  # Constructor for Dwarf class
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)#parent constructor
    self.max_health = 300;
    self.max_mana = 30;
    self.starting_potions = 1;
    self.starting_elixers = 1 
    self.attack = 9;
    self.defense = 6;
    self.magic = 4;
    self.resistance = 5;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    """ Defines the AI for the Dwarf class """
    move_complete = Character.move(self, player)
    if not move_complete: #if enemy has more than 50 health and no potions
      self.set_stance('a')
      return self.attack_enemy(player) #returns true if player dies
    return False
    
class Elf(Character):
  '''Defines the attributes of an Elf in the game. Inherits the constructor and methods
  of the Character class '''
  
  # Constructor for Elf class
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)
    self.max_health = 300;
    self.max_mana = 60;
    self.starting_potions = 1;
    self.starting_elixers = 1
    self.attack = 6;
    self.defense = 8;
    self.magic = 8;
    self.resistance = 8;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    """ Defines the AI for the Elf class """
    move_complete = Character.move(self, player)#if enemy has more than 50 health and no potions
    if not move_complete:
      self.set_stance('d')
      if self.shield == 0 and self.mana >= 20:#casts shield if it has no shield and has more than 20 mana
        self.cast_spell(2)
      else:
        return self.attack_enemy(player)#return true if player dies
    return False

class Goblin(Character):
  '''Defines the attributes of a Goblin in the game. Inherits the constructor and methods
  of the Character class '''
  
  # Constructor for Goblin class
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)
    self.max_health = 100;
    self.max_mana = 0;
    self.starting_potions = 0;
    self.starting_elixers = 0
    self.attack = 3;
    self.defense = 3;
    self.magic = 0;
    self.resistance = 0;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    """ Defines the AI for the Goblin class """
    move_complete = Character.move(self, player)#if enemy has more than 50 health and no potions
    if not move_complete:
      self.set_stance('d')
      return self.attack_enemy(player)#returns true if player dies
    return False

class Hobbit(Character):
  '''Defines the attributes of a Hobbit in the game. Inherits the constructor and methods
  of the Character class '''
  
  # Constructor for Hobbit class
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)
    self.max_health = 250;
    self.max_mana = 40;
    self.starting_potions = 2;
    self.starting_elixers = 2
    self.attack = 3;
    self.defense = 9;
    self.magic = 6;
    self.resistance = 10;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    """ Defines the AI for the Hobbit class """
    move_complete = Character.move(self, player)#if enemy has more than 50 health and no potions
    if not move_complete:
      self.set_stance('d')
      # Hobbits shield if they don't have one
      if self.shield == 0 and self.mana >= 20:
        self.cast_spell(2)
      else:
        return self.attack_enemy(player)#returns true if player dies
    return False

class Human(Character):
  '''Defines the attributes of a Human in the game. Inherits the constructor and methods
  of the Character class '''
  
  # Constructor for Human class
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)
    self.max_health = 250;
    self.max_mana = 40;
    self.starting_potions = 1;
    self.starting_elixers = 2
    self.attack = 7;
    self.defense = 8;
    self.magic = 5;
    self.resistance = 4;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    """ Defines the AI for the Human class """
    move_complete = Character.move(self, player)#if enemy has more than 50 health and no potions
    if not move_complete:
      if self.health*100 / self.max_health > 75: #if over 75% health aggressive
        self.set_stance('a')
      elif self.health*100 / self.max_health > 30:# else if over 30# health balance
        self.set_stance('b')
      else:
        self.set_stance('d')#below 30% health defensive
      if self.shield == 0 and self.mana >= 20:
        self.cast_spell(2)#cast shield
      else:
        return self.attack_enemy(player)#returns true if player dies
    return False

class Orc(Character):
  '''Defines the attributes of an Orc in the game. Inherits the constructor and methods
  of the Character class '''
  
  # Constructor for Orc class
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)
    self.max_health = 250;
    self.max_mana = 0;
    self.starting_potions = 0;
    self.starting_elixers = 0
    self.attack = 7;
    self.defense = 5;
    self.magic = 2;
    self.resistance = 4;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    """ Defines the AI for the Orc class """
    move_complete = Character.move(self, player)#if enemy has more than 50 health and no potions
    if not move_complete:
      self.set_stance('b')
      return self.attack_enemy(player)#returns true if player dies
    return False

class Uruk(Character):
  '''Defines the attributes of an Uruk in the game. Inherits the constructor and methods
  of the Character class '''
  
  # Constructor for Uruk class
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)
    self.max_health = 400;
    self.max_mana = 20;
    self.starting_potions = 1;
    self.starting_elixers = 0
    self.attack = 9;
    self.defense = 7;
    self.magic = 4;
    self.resistance = 6;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    """ Defines the AI for the Uruk class """
    move_complete = Character.move(self, player)#if enemy has more than 50 health and no potions
    if not move_complete:
      self.set_stance('a')
      return self.attack_enemy(player)#return true if player dies
    return False

class Wizard(Character):
  '''Defines the attributes of a Wizard in the game. Inherits the constructor and methods
  of the Character class '''
  
  # Constructor for Wizard class
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)
    self.max_health = 150;
    self.max_mana = 100;
    self.starting_potions = 2;
    self.starting_elixers = 3
    self.attack = 5;
    self.defense = 6;
    self.magic = 10;
    self.resistance = 10;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    """ Defines the AI for the Wizard class """
    move_complete = Character.move(self, player)#if enemy has more than 50 health and no potions
    if not move_complete:
      self.set_stance('d')
      if self.mana < 10 and player.mana > 0:#if enemy has low mana and player has mana 
        self.cast_spell(3, player)#cast mana drain
      elif self.shield == 0 and self.mana >= 20:
        self.cast_spell(2)#cast shield
      elif self.mana >= 10:
        return self.cast_spell(1, player)#cast fireball
      else:
        return self.attack_enemy(player)#return true if player dies
    return False

class Devil(Character):
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)
    self.max_health = 500;
    self.max_mana = 200;
    self.starting_potions = 3;
    self.starting_elixers = 2
    self.attack = 8;
    self.defense = 4;
    self.magic = 15;
    self.resistance = 10;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    move_complete = Character.move(self,player)
    if not move_complete:
      if self.health > 100:
        self.set_stance('a')
      elif self.health > 50:
        self.set_stance('b')
      else:
        self.set_stance('d')
      if self.mana < 10 and player.mana > 0:#if enemy has low mana and player has mana 
        self.cast_spell(3, player)#cast mana drain
      elif self.health > 100 and self.mana >= 10:
        return self.cast_spell(1, player)
      elif self.shield == 0 and self.mana >= 20:
        self.cast_spell(2)
      else:
        return self.attack_enemy(player)

      return False

class God(Character):
  def __init__(self, char_name, app):
    Character.__init__(self, char_name, app)
    self.max_health = 500;
    self.max_mana = 200;
    self.starting_potions = 3;
    self.starting_elixers = 3
    self.attack = 8;
    self.defense = 4;
    self.magic = 15;
    self.resistance = 10;
    self.health = self.max_health;
    self.mana = self.max_mana;
    self.potions = self.starting_potions;
    self.elixers = self.starting_elixers

  def move(self, player):
    move_complete = Character.move(self,player)
    if not move_complete:
      if self.health > 100:
        self.set_stance('a')
      elif self.health > 50:
        self.set_stance('b')
      else:
        self.set_stance('d')
      if self.mana < 10 and player.mana > 0:#if enemy has low mana and player has mana 
        self.cast_spell(3, player)#cast mana drain
      elif self.health > 100 and self.mana >= 10:
        return self.cast_spell(1, player)
      elif self.shield == 0 and self.mana >= 20:
        self.cast_spell(2)
      else:
        return self.attack_enemy(player)

      return False

        
  

