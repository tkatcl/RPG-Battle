#!/usr/local/bin/python3
"""
rpg.py - entry point for the RPG Game

Written by Bruce Fuda for Intermediate Programming
Python RPG Assignment 2014
"""

#import required python module and files
import time
import gui
import character
import battle
import random
import world

app = gui.simpleapp_tk(None)#instanciate gui (None is no parent)
app.title('RPG Battle') #name displayed on title bar

app.write('''
 _    _      _                             _         
| |  | |    | |                           | |        
| |  | | ___| | ___  ___  _ __ ___   ___  | |_  ___  
| |/\| |/ _ \ |/ __|/ _ \| '_ ` _ \ / _ \ | __|/ _ \ 
\  /\  /  __/ | (__| (_) | | | | | |  __/ | |_| (_) |
 \/  \/ \___|_|\___|\___/|_| |_| |_|\___|  \__|\___/

____________ _____  ______       _   _   _      _ 
| ___ \ ___ \  __ \ | ___ \     | | | | | |    | |
| |_/ / |_/ / |  \/ | |_/ / __ _| |_| |_| | ___| |
|    /|  __/| | __  | ___ \/ _` | __| __| |/ _ \ |
| |\ \| |   | |_\ \ | |_/ / (_| | |_| |_| |  __/_|
\_| \_\_|    \____/ \____/ \__,_|\__|\__|_|\___(_)

''')
app.write("You can exit the game at any time by typing in 'quit'")
app.write("")

def set_mode():
  """ Select the game mode """
  try:
    app.write("Please select a side:")
    app.write("1. Good")
    app.write("2. Evil")
    app.write("")
    app.wait_variable(app.inputVariable) #wait till user enters input
    mode = app.inputVariable.get() #variable of input
    
    if mode == 'quit':
      app.quit()
    
    mode = int(mode)
    if mode not in range(1,3): # check for 1 or 2
      raise ValueError
  
  except ValueError: #exception handling for value error
    app.write("You must enter a valid choice")
    app.write("")
    mode = set_mode() #recall function
  
  return mode

def set_race(mode):
  """ Set the player's race """
  if mode == 2: # Evil Mode
    app.write("Playing as the Forces of Sauron.")
    app.write("")
  
    # race selection - evil
    try:
      app.write("Please select your race:")
      app.write("1. Goblin")
      app.write("2. Orc")
      app.write("3. Uruk")
      app.write("4. Wizard")
      app.write("")
      app.wait_variable(app.inputVariable)#enter input
      race = app.inputVariable.get()#input var
      
      if race == 'quit':
        app.quit()
      
      race = int(race)
      if race not in range(1,5):#check for 1 to 4
        raise ValueError
    
    except ValueError: #exception handling
      app.write("You must enter a valid choice")
      app.write("")
      race = set_race(mode)#recall function

  else: # Good Mode (if mode == 1)
    app.write("Playing as the Free Peoples of Middle Earth.")
    app.write("")

    # race selection - good
    try:
      app.write("Please select your race:")
      app.write("1. Elf")
      app.write("2. Dwarf")
      app.write("3. Human")
      app.write("4. Hobbit")
      app.write("5. Wizard")
      app.write("")
      app.wait_variable(app.inputVariable)#enter input
      race = app.inputVariable.get()#input var
      
      if race == 'quit':
        app.quit()
        
      race = int(race)
      
      if race not in range(1,6):
        raise ValueError
    
    except ValueError: #exception handling
      app.write("You must enter a valid choice")
      app.write("")
      race = set_race(mode)#recall function
  
  return race #return number

def set_name():
  """ Set the player's name """
  try:
    app.write("Please enter your Character Name:")
    app.write("")
    app.wait_variable(app.inputVariable)#enter input
    char_name = app.inputVariable.get()#input var

    if char_name == 'quit':
      app.quit()

    if char_name == '':
      raise ValueError

  except ValueError:#exception handling
    app.write("")
    app.write("Your name cannot be blank")
    char_name = set_name()#recall function

  return char_name #return string name

def create_player(mode, race, char_name):
  """ Create the player's character """
  # Evil
  if mode == 2:
    if race == 1:
      player = character.Goblin(char_name, app)#instanciate goblin object from character fill as player
    elif race == 2:
      player = character.Orc(char_name, app)#instanciate Orc object from character fill as player
    elif race == 3:
      player = character.Uruk(char_name, app)#instanciate Uruk object from character fill as player
    else:
      player = character.Wizard(char_name, app)#instanciate Wizard object from character fill as player
  # Good
  else:
    if race == 1:
      player = character.Elf(char_name, app)#instanciate Elf object from character fill as player
    elif race == 2:
      player = character.Dwarf(char_name, app)#instanciate Dwarf object from character fill as player
    elif race == 3:
      player = character.Human(char_name, app)#instanciate Human object from character fill as player
    elif race == 4:
      player = character.Hobbit(char_name, app)#instanciate Hobbit object from character fill as player
    else:
      player = character.Wizard(char_name, app)#instanciate Wizard object from character fill as player
  return player #object player

def set_difficulty():
  """ Set the difficulty of the game """
  try:
    app.write("Please select a difficulty level:")
    app.write("e - Easy")
    app.write("m - Medium")
    app.write("h - Hard")
    app.write("l - Legendary")
    app.write("")
    app.wait_variable(app.inputVariable)#wait for input 
    difficulty = app.inputVariable.get()#input var

    if difficulty == 'quit':
      app.quit()

    if difficulty not in ['e','m','h','l'] or difficulty == '':
      raise ValueError

  except ValueError: #exception handling
    app.write("You must enter a valid choice")
    app.write("")
    difficulty = set_difficulty()#recall function

  app.write("You have selected "+difficulty+" as your difficulty")
  app.write("Good Luck!")
  app.write("")

  return difficulty

def create_enemies(mode, difficulty):
  """ Create the enemies """
  if mode == 2: # Evil Mode - good enemies
    if difficulty == 'm':
      enemies = [character.Hobbit("Peregrin", app), character.Hobbit("Meriadoc", app), character.Human("Eowyn", app)] #hobbit,hobbit,human (medium)
    elif difficulty == 'h':
      enemies = [character.Dwarf("Gimli", app), character.Elf("Legolas", app), character.Human("Boromir", app)]#dwarf,elf,human (hard)
    elif difficulty == 'l':
      enemies = [character.Human("Faramir", app), character.Human("Aragorn", app), character.Wizard("Gandalf", app)]#human,human,wizard (legendary)
    else:
      enemies = [character.Hobbit("Frodo", app), character.Hobbit("Sam", app)]#hobbit,hobbit (easy)

  else: # Good Mode - evil enemies
    if difficulty == 'm':
      enemies = [character.Goblin("Azog", app), character.Goblin("Gorkil", app), character.Orc("Sharku", app)] #goblin,goblin,orc (medium)
    elif difficulty == 'h':
      enemies = [character.Orc("Shagrat", app), character.Orc("Gorbag", app), character.Uruk("Lurtz", app)] #orc,orc,uru, (hard)
    elif difficulty == 'l':
      enemies = [character.Orc("Grishnakh", app), character.Uruk("Lurtz", app), character.Wizard("Saruman", app)] #orc,uruk,wizard (legendary)
    else:
      enemies = [character.Goblin("Azog", app), character.Goblin("Gorkil", app)] #goblin,goblin (easy)

  return enemies #list of enemy objects

def quit_game():
  """ Quits the game """
  try:
    app.write("Play Again? (y/n)")
    app.write("")
    app.wait_variable(app.inputVariable)#wait for input
    quit_choice = app.inputVariable.get()#quit choice

    if quit_choice == 'quit':
      app.quit()

    if quit_choice not in ['y','n'] or quit_choice == '':
      raise ValueError

  except ValueError:
    app.write("You must enter a valid choice")
    app.write("")
    quit_choice = quit_game()#recall function

  return quit_choice

def print_results():
  """displays statistics"""
  app.write("Game Over!")
  app.write("No. Battles: {0}".format(str(battles)))
  app.write("No. Wins: {0}".format(wins))
  app.write("No. Kills: {0}".format(kills))
  app.write("Success Rate (%): {0:.2f}%".format(float(wins*100/battles)))
  app.write("Avg. kills per battle: {0:.2f}".format(float(kills)/battles))
  app.write("")


battles = 0
wins = 0
kills = 0

mode = set_mode() #return good or evil
race = set_race(mode) #set race based on good or evil
char_name = set_name() #player name
player = create_player(mode, race, char_name)#instanciate player object
app.write(player)#prints you are name the class
app.write("")
difficulty = set_difficulty()#returns str of difficulty
enemies = create_enemies(mode, difficulty)#returns list of enemy objects

time.sleep(1)

game_map = world.World(10,8,8,9,9,app)#has to be size 10 or greater
game_map.populate_obstacles()
game_map.populate_enemies(difficulty)

while True:

  moving = True
  finished = False
  alive_enemies = True #check if enemies are still alive

  while moving:
    app.write(game_map)
    direction = game_map.get_direction()
    if game_map.move_player(direction):
      moving = False
      
    if game_map.xlocation == game_map.xend and game_map.ylocation == game_map.yend:        
        finished = True
        moving = False

    if moving == True and finished == False:
      app.write(game_map)
      time.sleep(1)
      if game_map.move_enemies(difficulty):
        moving = False

    

  if finished == False:    
    for x in range(20):
      app.write("")
    app.write("                                                     ... Get ready to BATTLE!!!")
    for x in range(20):
      app.write("")
      
    time.sleep(5)

    encounter = battle.Battle(player, enemies, app) #instanciate battle from battle file
    battle_wins, battle_kills = encounter.play() #play method returns win or loose and number of kills

    battles += 1
    wins += battle_wins
    kills += battle_kills

    print_results()

  alive_enemies = game_map.check_for_enemies()

  if alive_enemies == False:    
    finished = True
    
  if finished == True:
    if alive_enemies == False:
      app.write("Congratulations, you have vanquished all your enemies")
    else:
      app.write("Congratulations, you made it to the finish alive!")
    app.write("")
    quit = quit_game()

    if quit == "n":
      app.write("Thank you for playing RPG Battle.")
      time.sleep(2)
      app.quit()

    else:
      # Playing again - reset all enemies and players
      player.reset()
      for enemy in enemies:
        enemy.reset()
      
      battles = 0
      wins = 0
      kills = 0

      mode = set_mode() #return good or evil
      race = set_race(mode) #set race based on good or evil
      player = create_player(mode, race, char_name)#instanciate player object
      app.write(player)#prints you are name the class
      app.write("")
      difficulty = set_difficulty()#returns str of difficulty
      enemies = create_enemies(mode, difficulty)#returns list of enemy objects

      time.sleep(1)

      game_map.reset_map()
      game_map.populate_obstacles()
      game_map.populate_enemies(difficulty)

