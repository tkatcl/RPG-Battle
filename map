import random
import time
import gui

"""
app = gui.simpleapp_tk(None)#instanciate gui (None is no parent)
app.title('RPG Battle') #name displayed on title bar
"""

class World:

    def __init__(self, size, xstart, ystart, xend, yend,app):
        self.size = size
        
        self.world = [x[:] for x in [['.']*size]*size]
        
        self.xstart = xstart
        self.ystart = ystart
        
        self.xend = xend
        self.yend = yend
        
        self.player = '☺'
        self.finish = '⚐'
        self.obstacle = '#'
        self.enemies = '⚔'
        self.app = app
        
        self.xlocation = self.xstart
        self.ylocation = self.ystart
        
        self.world[self.ylocation][self.xlocation] = self.player
        self.world[self.yend][self.xend] = self.finish

    def __str__(self):
        display = ''
        for row in self.world:
            display += str(' '.join(row)) + '\n'
        display.rstrip()
        return display

    def populate_obstacles(self):
        obstacles = (self.size**2)*0.1
        choices = [num for num in range(1,self.size-1)]
        for x in range(int(obstacles)):
            while True:
                obx = random.choice(choices)
                oby = random.choice(choices)
                if self.world[oby][obx] == '.':
                    if self.world[oby+1][obx] == '.' and self.world[oby-1][obx] == '.':
                        if self.world[oby][obx+1] == '.' and self.world[oby][obx-1] == '.':          
                            self.world[oby][obx] = self.obstacle
                            break

    def populate_enemies(self,difficulty):
        if difficulty == 'e':
            enemies = int((self.size**2)*0.04)            
        elif difficulty == 'm':
            enemies = int((self.size**2)*0.06)            
        elif difficulty == 'h':
            enemies = int((self.size**2)*0.08)            
        elif difficulty == 'l':
            enemies = int((self.size**2)*0.1)

        xchoices = [x for x in range(self.size)]
        ychoices = [y for y in range(2,self.size)]

        for row in reversed(self.world):
            for y in range(int(self.size*0.5)):
                xen = random.choice(xchoices)
                yen = random.choice(ychoices)
                if self.world[yen][xen] == '.' and enemies > 0:
                    self.world[yen][xen] = self.enemies
                    enemies-=1
            
            

    def invalid_direction(self,direction):
        invalid = True       
        if direction == 'd':
            if self.ylocation < self.size -1 and self.world[self.ylocation+1][self.xlocation] != self.obstacle:
                invalid = False                
        elif direction == 'r':
            if self.xlocation < self.size -1 and self.world[self.ylocation][self.xlocation+1] != self.obstacle:
                invalid = False                
        elif direction == 'u':
            if self.ylocation > 0 and self.world[self.ylocation-1][self.xlocation] != self.obstacle:
                invalid = False                
        elif direction == 'l':
            if self.xlocation > 0 and self.world[self.ylocation][self.xlocation-1] != self.obstacle:
                invalid = False
        return invalid
        
    def get_direction(self):
        self.app.write("Please select a direction:")
        if self.ylocation < (self.size -1):
            self.app.write("d - down")
        if self.ylocation > 0:
            self.app.write("u - up")
        if self.xlocation > 0:
            self.app.write("l - left")
        if self.xlocation < (self.size - 1):
            self.app.write("r - right")
        self.app.write("")
        self.app.wait_variable(self.app.inputVariable)
        direction = self.app.inputVariable.get()
        
        if direction == 'quit':
            self.app.quit()

        if direction not in ['d','u','l','r']:
            self.app.write("Invalid direction")
            self.app.write("")
            direction = self.get_direction()

        if self.invalid_direction(direction):
            self.app.write("You cannot go that way")
            self.app.write("")
            direction = self.get_direction()

        return direction

    def move_player(self,direction):
        encounter = False
        
        if self.xlocation == self.xend and self.ylocation == self.yend:
            self.world[self.ylocation][self.xlocation] = self.finish
        else:
            self.world[self.ylocation][self.xlocation] = '.'
            
        if direction == 'd':
            self.ylocation += 1
            if self.world[self.ylocation][self.xlocation] ==  self.enemies:
                encounter = True
            self.world[self.ylocation][self.xlocation] = self.player
        elif direction == 'u':
            self.ylocation -= 1
            if self.world[self.ylocation][self.xlocation] == self.enemies:
                encounter = True
            self.world[self.ylocation][self.xlocation] = self.player
        elif direction == 'l':
            self.xlocation -= 1
            if self.world[self.ylocation][self.xlocation] == self.enemies:
                encounter = True
            self.world[self.ylocation][self.xlocation] = self.player
        elif direction == 'r':
            self.xlocation += 1
            if self.world[self.ylocation][self.xlocation] == self.enemies:
                encounter = True
            self.world[self.ylocation][self.xlocation] = self.player
        
        return encounter

    def move_enemies(self,difficulty):
        if difficulty == 'l':
            ranged = int(self.size*0.7)
        elif difficulty == 'h':
            ranged = int(self.size*0.6)
        elif difficulty == 'm':
            ranged = int(self.size*0.5)
        elif difficulty == 'e':
            ranged = int(self.size*0.4)

        encounter = False
        
        for distance in range(1,ranged+1): #move enemies from right to player
            try:
                if self.world[self.ylocation][self.xlocation+distance] == self.enemies:
                    if self.world[self.ylocation][self.xlocation+distance-1] == self.player:
                        self.world[self.ylocation][self.xlocation+distance] = '.'
                        encounter = True
                    elif self.world[self.ylocation][self.xlocation+distance-1] == '.':
                        self.world[self.ylocation][self.xlocation+distance] = '.'
                        self.world[self.ylocation][self.xlocation+distance-1] = self.enemies
            except IndexError:
                break
                
        if encounter == False:                
            for distance in range(1,ranged+1): #move enemies from left to player
                try:
                    if self.world[self.ylocation][self.xlocation-distance] == self.enemies:
                        if self.world[self.ylocation][self.xlocation-distance+1] == self.player:
                            self.world[self.ylocation][self.xlocation-distance] = '.'
                            encounter = True
                        elif self.world[self.ylocation][self.xlocation-distance+1] == '.':
                            self.world[self.ylocation][self.xlocation-distance] = '.'
                        self.world[self.ylocation][self.xlocation-distance+1] = self.enemies
                except IndexError:
                    break
        if encounter == False:            
            for distance in range(1,ranged+1): #move enemies from up to player
                try:
                    if self.world[self.ylocation+distance][self.xlocation] == self.enemies:
                        if self.world[self.ylocation+distance-1][self.xlocation] == self.player:
                            self.world[self.ylocation+distance][self.xlocation] = '.'
                            encounter = True
                        elif self.world[self.ylocation+distance-1][self.xlocation] == '.':
                            self.world[self.ylocation+distance][self.xlocation] = '.'
                            self.world[self.ylocation+distance-1][self.xlocation] = self.enemies
                except IndexError:
                    break
        if encounter == False:
            for distance in range(1,ranged+1): #move enemies from down to player
                try:
                    if self.world[self.ylocation-distance][self.xlocation] == self.enemies:
                        if self.world[self.ylocation-distance+1][self.xlocation] == self.player:
                            self.world[self.ylocation-distance][self.xlocation] = '.'
                            encounter = True
                        elif self.world[self.ylocation-distance+1][self.xlocation] == '.':
                            self.world[self.ylocation-distance][self.xlocation] = '.'
                            self.world[(self.ylocation-distance)+1][self.xlocation] = self.enemies
                except IndexError:
                    break
                
        return encounter
                           
"""                
difficulty = 'm'
game_map = World(20,0,0,9,9)
game_map.populate_obstacles()
game_map.populate_enemies(difficulty)
while True:
    app.write(game_map)
    direction = game_map.get_direction()
    if game_map.move_player(direction):
        app.write("This is where you encounter enemies")
    app.write(game_map)
    time.sleep(1)
    if game_map.move_enemies(difficulty):
        app.write("This is where you encounter enemies")
"""


