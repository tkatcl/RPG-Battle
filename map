import random
import time
import gui

class World:

    def __init__(self, size,user_player, app):
        self.size = size 
        
        self.world = [x[:] for x in [['.']*size]*size]
        
        self.xstart = 0
        self.ystart = 0
        
        self.xend = self.size - 1
        self.yend = self.size - 1
        
        self.player = '☺'
        self.finish = '⚐'
        self.obstacle = '#'
        self.enemies = '⚔'
        self.skull = '☠'
        self.merchant = '⚚'
        self.money = '$'
        self.app = app
        self.user_player = user_player

        self.player_starting_xp = 0
        self.player_xp = self.player_starting_xp

        self.player_starting_money = 5000
        self.player_money = self.player_starting_money

        self.player_starting_mana_ability = False
        self.player_starting_shield_ability = False
        self.player_starting_fire_ability = False
        self.player_starting_nuke_ability = False

        self.player_mana_ability = self.player_starting_mana_ability
        self.player_shield_ability = self.player_starting_shield_ability
        self.player_fire_ability = self.player_starting_fire_ability
        self.player_nuke_ability = self.player_starting_nuke_ability

        self.merchant_store = [self.player_nuke_ability, self.player_mana_ability, self.player_shield_ability, self.player_fire_ability, self.user_player.potions, self.user_player.elixers]
        self.store_items = ["nuke_ability - 1500","mana_ability - $75", "shield_ability - $75", "fire_ability - $150", "healing_potion - 50", "mana_potion - 25"]   
        
        self.dead_enemy_locations = []

        self.merchant_xloc = int(self.size/2)
        self.merchant_yloc = int(self.size/2)
        
        self.xlocation = self.xstart
        self.ylocation = self.ystart
        
        self.world[self.ylocation][self.xlocation] = self.player
        self.world[self.yend][self.xend] = self.finish
        self.world[self.merchant_yloc][self.merchant_xloc] = self.merchant

    def __str__(self):
        display = "XP: " + str(self.player_xp) + "       " + "Money: $" + str(self.player_money) + '\n'
        for row in self.world:
            display += str(' '.join(row)) + '\n'
        display.rstrip()
        return display

    def populate_obstacles(self):
        obstacles = (self.size**2)*0.1
        choices = [num for num in range(1,self.size-1)]
        for x in range(int(obstacles)):
            while True:
                obx = random.choice(choices)
                oby = random.choice(choices)
                if self.world[oby][obx] == '.':
                    if self.world[oby+1][obx] == '.' and self.world[oby-1][obx] == '.':
                        if self.world[oby][obx+1] == '.' and self.world[oby][obx-1] == '.':          
                            self.world[oby][obx] = self.obstacle
                            break

    def populate_enemies(self,difficulty):
        if difficulty == 'e':
            enemies = int((self.size**2)*0.04)            
        elif difficulty == 'm':
            enemies = int((self.size**2)*0.06)            
        elif difficulty == 'h':
            enemies = int((self.size**2)*0.08)            
        elif difficulty == 'l':
            enemies = int((self.size**2)*0.1)
        elif difficulty == 'x':
            enemies = int((self.size**2)*0.15)

        num_enemies = enemies    

        xchoices = [x for x in range(self.size)]
        ychoices = [y for y in range(2,self.size)]

        for row in reversed(self.world):
            for y in range(int(self.size*0.5)):
                xen = random.choice(xchoices)
                yen = random.choice(ychoices)
                if self.world[yen][xen] == '.' and enemies > 0:
                    self.world[yen][xen] = self.enemies
                    enemies-=1
        return num_enemies    

    def populate_money(self):
        money = (self.size**2)*0.1
        choices = [num for num in range(1,self.size-1)]
        for x in range(int(money)):
            while True:
                obx = random.choice(choices)
                oby = random.choice(choices)
                if self.world[oby][obx] == '.':
                    if self.world[oby+1][obx] == '.' and self.world[oby-1][obx] == '.':
                        if self.world[oby][obx+1] == '.' and self.world[oby][obx-1] == '.':          
                            self.world[oby][obx] = self.money
                            break

    def invalid_direction(self,direction):
        invalid = True       
        if direction == 'd':
            if self.ylocation < self.size -1 and self.world[self.ylocation+1][self.xlocation] != self.obstacle:
                invalid = False                
        elif direction == 'r':
            if self.xlocation < self.size -1 and self.world[self.ylocation][self.xlocation+1] != self.obstacle: 
                invalid = False                
        elif direction == 'u':
            if self.ylocation > 0 and self.world[self.ylocation-1][self.xlocation] != self.obstacle:
                invalid = False                
        elif direction == 'l':
            if self.xlocation > 0 and self.world[self.ylocation][self.xlocation-1] != self.obstacle:
                invalid = False
        return invalid
        
    def get_direction(self):
        self.app.write("Please select a direction:")
        if self.ylocation < (self.size -1):
            self.app.write("d - down")
        if self.ylocation > 0:
            self.app.write("u - up")
        if self.xlocation > 0:
            self.app.write("l - left")
        if self.xlocation < (self.size - 1):
            self.app.write("r - right")
        self.app.write("")
        self.app.wait_variable(self.app.inputVariable)
        direction = self.app.inputVariable.get()
        
        if direction == 'quit':
            self.app.quit()

        if direction not in ['d','u','l','r']:
            self.app.write("Invalid direction")
            self.app.write("")
            direction = self.get_direction()

        if self.invalid_direction(direction):
            self.app.write("You cannot go that way")
            self.app.write("")
            direction = self.get_direction()

        return direction

    def move_player(self,direction):
        encounter = False
        
        if self.xlocation == self.xend and self.ylocation == self.yend:
            self.world[self.ylocation][self.xlocation] = self.finish

        elif [self.ylocation,self.xlocation] in self.dead_enemy_locations:
            self.world[self.ylocation][self.xlocation] = self.skull

        elif self.ylocation == self.merchant_yloc and self.xlocation == self.merchant_xloc:
            self.world[self.ylocation][self.xlocation] = self.merchant
        
        else:
            self.world[self.ylocation][self.xlocation] = '.'
            
        if direction == 'd':
            self.ylocation += 1
            self.app.write("")
            self.app.write("Moving down...")
            self.app.write("")
            if self.world[self.ylocation][self.xlocation] ==  self.enemies:
                encounter = True
            elif self.world[self.ylocation][self.xlocation] == self.money:
                self.player_money += 5                
            self.world[self.ylocation][self.xlocation] = self.player
        elif direction == 'u':
            self.ylocation -= 1
            self.app.write("")
            self.app.write("Moving up...")
            self.app.write("")
            if self.world[self.ylocation][self.xlocation] == self.enemies:
                encounter = True
            elif self.world[self.ylocation][self.xlocation] == self.money:
                self.player_money += 5     
            self.world[self.ylocation][self.xlocation] = self.player
        elif direction == 'l':
            self.xlocation -= 1
            self.app.write("")
            self.app.write("Moving left...")
            self.app.write("")
            if self.world[self.ylocation][self.xlocation] == self.enemies:
                encounter = True
            elif self.world[self.ylocation][self.xlocation] == self.money:
                self.player_money += 5     
            self.world[self.ylocation][self.xlocation] = self.player
        elif direction == 'r':
            self.xlocation += 1
            self.app.write("")
            self.app.write("Moving right...")
            self.app.write("")
            if self.world[self.ylocation][self.xlocation] == self.enemies:
                encounter = True
            elif self.world[self.ylocation][self.xlocation] == self.money:
                self.player_money += 5     
            self.world[self.ylocation][self.xlocation] = self.player
        time.sleep(0.5)
        return encounter

    def move_enemies(self,difficulty):
        if difficulty == 'x':
            ranged = self.size
        elif difficulty == 'l':
            ranged = int(self.size*0.6)
        elif difficulty == 'h':
            ranged = int(self.size*0.5)
        elif difficulty == 'm':
            ranged = int(self.size*0.4)
        elif difficulty == 'e':
            ranged = int(self.size*0.3)

        encounter = False

        self.app.write("Enemies Moving...")
        self.app.write("")
                
        for distance in range(1,ranged+1): #move enemies from right to player
            try:
                if self.xlocation+distance > self.size -1:
                    break
                if self.world[self.ylocation][self.xlocation+distance] == self.enemies:
                    if self.world[self.ylocation][self.xlocation+distance-1] == self.player:
                        self.world[self.ylocation][self.xlocation+distance] = '.'
                        encounter = True
                    elif self.world[self.ylocation][self.xlocation+distance-1] == '.':
                        self.world[self.ylocation][self.xlocation+distance] = '.'
                        self.world[self.ylocation][self.xlocation+distance-1] = self.enemies
            except IndexError:
                break
                
        if encounter == False:                
            for distance in range(1,ranged+1): #move enemies from left to player
                try:
                    if self.xlocation-distance < 0:
                        break
                    if self.world[self.ylocation][self.xlocation-distance] == self.enemies:
                        if self.world[self.ylocation][self.xlocation-distance+1] == self.player:
                            self.world[self.ylocation][self.xlocation-distance] = '.'
                            encounter = True
                        elif self.world[self.ylocation][self.xlocation-distance+1] == '.':
                            self.world[self.ylocation][self.xlocation-distance] = '.'
                        self.world[self.ylocation][self.xlocation-distance+1] = self.enemies
                except IndexError:
                    break
        if encounter == False:            
            for distance in range(1,ranged+1): #move enemies from up to player
                try:
                    if self.ylocation + distance > self.size - 1:
                        break
                    if self.world[self.ylocation+distance][self.xlocation] == self.enemies:
                        if self.world[self.ylocation+distance-1][self.xlocation] == self.player:
                            self.world[self.ylocation+distance][self.xlocation] = '.'
                            encounter = True
                        elif self.world[self.ylocation+distance-1][self.xlocation] == '.':
                            self.world[self.ylocation+distance][self.xlocation] = '.'
                            self.world[self.ylocation+distance-1][self.xlocation] = self.enemies
                except IndexError:
                    break
        if encounter == False:
            for distance in range(1,ranged+1): #move enemies from down to player
                try:
                    if self.ylocation - distance < 0:
                        break
                    if self.world[self.ylocation-distance][self.xlocation] == self.enemies:
                        if self.world[self.ylocation-distance+1][self.xlocation] == self.player:
                            self.world[self.ylocation-distance][self.xlocation] = '.'
                            encounter = True
                        elif self.world[self.ylocation-distance+1][self.xlocation] == '.':
                            self.world[self.ylocation-distance][self.xlocation] = '.'
                            self.world[(self.ylocation-distance)+1][self.xlocation] = self.enemies
                except IndexError:
                    break
                
        return encounter
    def reset_map(self):
        self.world = [x[:] for x in [['.']*self.size]*self.size]

        self.xlocation = self.xstart
        self.ylocation = self.ystart
        
        self.world[self.ylocation][self.xlocation] = self.player
        self.world[self.yend][self.xend] = self.finish

        self.dead_enemy_location = []

        self.player_money = self.player_starting_money
        self.player_xp = self.player_starting_mana

        self.player_mana_ability = self.player_starting_mana_ability
        self.player_shield_ability = self.player_starting_shield_ability
        self.player_fire_ability = self.player_starting_fire_ability

    def check_for_enemies(self):
        alive_enemies = False
        for row in self.world:
            for x in row:
                if x == self.enemies:
                    alive_enemies = True
                    break

        return alive_enemies

    def after_battle(self, last_moved_direction, battle_wins):            
        if battle_wins == 1:
           self.world[self.ylocation][self.xlocation] = self.skull
           self.dead_enemy_locations.append([self.ylocation,self.xlocation])

        elif battle_wins == 0:
            self.world[self.ylocation][self.xlocation] = self.enemies

        if last_moved_direction == 'd':
            self.ylocation -= 1
        elif last_moved_direction == 'u':
            self.ylocation += 1
        elif last_moved_direction == 'r':
            self.xlocation -= 1
        elif last_moved_direction == 'l':
            self.xlocation += 1

        self.world[self.ylocation][self.xlocation] = self.player

    def meet_merchant(self):
        self.app.write("Welcome to Harry's supplies store" + '\n')
        time.sleep(1)
        self.app.write("Are you tired of waiting for your xp to grow?" + '\n')
        time.sleep(1)
        self.app.write("Well you're in luck, at Harry's store you can buy spells and potions without having to risk your precious lives" + '\n')
        time.sleep(1)
        self.app.write("What would you like to buy?" + '\n')

    def valid_purchase(self,purchase):
        valid = True
        
        if purchase == 'quit':
            self.app.quit()
            
        if purchase not in [0,1,2,3,4,5]:
            valid = False

        if purchase == 0:
            if self.player_money < 1500:
                valid = False            
        if purchase == 1 or purchase == 2:
            if self.player_money < 75:
                valid = False
        if purchase == 3:
            if self.player_money < 150:
                valid = False
        if purchase == 4:
            if self.player_money < 50:
                valid = False                
        if purchase == 5:
            if self.player_money < 25:
                valid = False
                
        return valid

    def buy_merchant(self):
        self.app.write("Player money: $" + str(self.player_money))
        if self.player_money >= 25:
            self.app.write("Items available:")
            for item in range(len(self.merchant_store)):
                if item < 3:
                    if self.merchant_store[item] == False:
                        
                        self.app.write(str(item)+'. - '+self.store_items[item])
                    else:
                        self.app.write(str(item)+" Ability already aquired!")

                else:
                    self.app.write(str(item) +'. - '+self.store_items[item])
                self.app.write("")
            
            self.app.wait_variable(self.app.inputVariable)#wait for input 
            purchase = self.app.inputVariable.get()
            purchase = int(purchase)

            if self.valid_purchase(purchase):
                if purchase == 0:
                    self.player_money -= 1500
                    self.player_nuke_ability = True
                    self.user_player.player_nuke_ability = True
                    self.app.write("DEAR GOD YOU HAVE THE POWER OF DOOM!!!!!")
                if purchase == 1:
                    self.player_money -= 75
                    self.player_mana_ability = True
                    self.user_player.player_mana_ability = True
                    self.app.write("You have purchased the: mana ability")
                elif purchase == 2:
                    self.player_money -= 75
                    self.player_shield_ability = True
                    self.user_player.player_shield_ability = True
                    self.app.write("You have purchased the: shield ability")
                elif purchase == 3:
                    self.player_money -= 150
                    self.player_fire_ability = True
                    self.user_player.player_fire_ability = True
                    self.app.write("You have purchased the: fire ability")
                elif purchase == 4:
                    self.player_money -= 50
                    self.user_player.potions += 1
                    self.app.write("You have purchased a healing potion")
                elif purchase == 5:
                    self.player_money -= 25
                    self.user_player.potions += 1
                    self.app.write("You have purchased an elixer potion")

                self.app.write("")
                self.app.write("Your current balance: $"+str(self.player_money))
                time.sleep(1)
                self.app.write("Thankyou for shopping at Harry's supply store")
                self.app.write("Would you like to buy anything else? (y/n)")
                self.app.wait_variable(self.app.inputVariable)
                decision = self.app.inputVariable.get()
                while decision != 'y' and decision != 'n':
                    self.app.write("Invalid input")
                    self.app.wait_variable(self.app.inputVariable)
                    decision = self.app.inputVariable.get()
                    
                if decision == 'y':
                    self.buy_merchant()

                else:
                    self.app.write("Goodbye and goodluck out there!" + '\n')
                    time.sleep(2)          
            else:
                self.app.write("Invalid purchase" + '\n')
                self.buy_merchant()
        else:
            self.app.write("Your cash balance is too low!")
            time.sleep(1)
            self.app.write("If you ain't talking money I ain't talking at all!" + '\n')
            time.sleep(3)
           
            

