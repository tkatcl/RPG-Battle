#!/usr/local/bin/python3
"""
Battle.py - The battle class manages the events of the battle

Written by Bruce Fuda for Intermediate Programming
Python RPG Assignment 2014
"""

# import modules
import sys
import time
import random

class Battle:

  def __init__(self, player, enemies, allies, player_experience, app):
    """
    Instantiates a battle object between the players and enemies specified,
    sending output to the given gui instance
    """
    self.player = player
    self.enemies = enemies
    self.allies = allies
    self.app = app
    self.turn = 1
    self.wins = 0
    self.kills = 0
    self.player_won = False
    self.player_lost = False
    self.player_experience = player_experience     
    self.experienced_earned = 0
  
  def play(self):
    """
    Begins and controls the battle
    returns tuple of (win [1 or 0], no. kills)
    """
    
    while not self.player_won and not self.player_lost:
      
      self.app.write("Turn "+str(self.turn))
      self.app.write("")
      time.sleep(1)#pause
      
      # This is where the bulk of the battle takes place
      flee = self.do_player_actions()
      if flee != 'fled' and flee != 'died':
        self.do_allies_actions()
        self.do_enemy_actions()
      else:
        break
      # advance turn counter
      self.turn += 1
      self.experienced_earned += 10
      
    return (self.wins, self.kills, flee, self.experienced_earned)

  def get_action(self):
    """ Gets the player's chosen action for their turn """
    try:
      self.app.write(self.player.name + "'s Turn:")
      self.app.write("1. Attack Enemies")
      self.app.write("2. Cast Magic")
      self.app.write("3. Use Potion")
      self.app.write("4. Flee")
      self.app.write("5. Unique ability (Do not select this, it is not complete and will quit the game)")
      self.app.write("6. Use Elixer")
      self.app.write("")
      self.app.wait_variable(self.app.inputVariable)
      player_action = self.app.inputVariable.get()

      if player_action == 'quit':
        self.app.quit()

      player_action = int(player_action)
      if player_action not in range(1,7): #checks for 1 2 or 3 or 4
        raise ValueError

    except ValueError:
      self.app.write("You must enter a valid choice")
      self.app.write("")
      player_action = self.get_action()
    
    return player_action

  def select_spell(self):
    """ Selects the spell the player would like to cast """
    player_race = self.player.__class__.__name__ #players race

    try:
      self.app.write("Select your spell:")
      if player_race == "Wizard" or player_race == "Devil" or player_race == "God" and self.player.mana >= 10 and self.player.player_fire_ability == True:
        self.app.write("1. Fireball (10 mp)")
      if self.player.mana >= 20 and self.player.player_shield_ability == True:
        self.app.write("2. Shield (20 mp)")
      if player_race == "Wizard" or player_race == "Devil" or player_race == "God" and self.player.player_mana_ability == True:
        self.app.write("3. Mana Drain (no mp cost)")
      if self.player.mana >= 50 and self.player.player_nuke_ability == True:
        self.app.write("4. Nuke")
      self.app.write("0. Cancel Spell")
      self.app.write("")
      self.app.wait_variable(self.app.inputVariable)#take user input
      spell_choice = self.app.inputVariable.get()#input variable

      if spell_choice == 'quit':
        self.app.quit()
      spell_choice = int(spell_choice)
      if spell_choice == 0: #cancel spell
        return False
      valid_spell = self.player.valid_spell(spell_choice) # checks if spell is availbale returns true or false
      if not valid_spell:
        raise ValueError
    except ValueError: #exception handling
      self.app.write("You must enter a valid choice")
      self.app.write("")
      spell_choice = self.select_spell()#recall method
    
    return spell_choice

  def choose_target(self):
    """ Selects the target of the player's action """
    try:
      self.app.write("Choose your target:")
      j = 0 # number ascociated with enemy
      while j < len(self.enemies):
        if self.enemies[j].health > 0: #check enemy in list of enemies is alive
          self.app.write(str(j) + ". " + self.enemies[j].name) #prints user option
        j += 1
      self.app.write("")
      self.app.wait_variable(self.app.inputVariable)#wait for user input
      target = self.app.inputVariable.get()#input variable

      if target == 'quit':
        self.app.quit()

      target = int(target)
      if not (target < len(self.enemies) and target >= 0) or self.enemies[target].health <= 0: #checks if user input is a valid number between number of enemies and 0 and checks if enemy is alive
        raise ValueError
    except ValueError:#exception handling
      self.app.write("You must enter a valid choice")
      self.app.write("")
      target = self.choose_target() #recall function

    return target #returns index of enemy from enemy list

  def choose_stance(self):
    """chooses stance of player"""
    try:
      self.app.write("Choose your stance:")
      self.app.write("a - Aggressive")
      self.app.write("d - Defensive")
      self.app.write("b - Balanced")
      self.app.write("")
      self.app.wait_variable(self.app.inputVariable)#user input
      stance_choice = self.app.inputVariable.get()#input variable

      if stance_choice == 'quit':
        self.app.quit()

      if stance_choice not in ['a','d','b'] or stance_choice == '':
        raise ValueError

    except ValueError: #exception handling
      self.app.write("You must enter a valid choice")
      self.app.write("")
      stance_choice = self.choose_stance()#recall function
    
    return stance_choice

  def player_flee(self):
    
    succesfull = True
    chance = random.randint(1,10)
    if chance < 4:
      succesfull = False
      self.app.write("You were killed while fleeing the battle!")
    else:
      self.app.write("You have successfully fled the battle!")

    self.app.write("")
      
    return succesfull
    
  def do_player_actions(self):
    """ Performs the player's actions """
  
    turn_over = False
  
    while not self.player_won and not turn_over:

      self.player.print_status() #prints health mana and potions of player
      stance_choice = self.choose_stance() #returns a, d, or b
      self.player.set_stance(stance_choice)#sets attack and defense mod and prints you set this stance
      
      player_action = self.get_action() #returns 1,2 or 3

      has_attacked = False
     
      if player_action == 6:
        has_attacked = self.player.use_elixer()

      elif player_action == 5:
        self.app.quit()

      elif player_action == 4:
        succesfull = self.player_flee()
        if succesfull:
          return 'fled'
        else:
          return 'died'

      elif player_action == 3: #uses potion
        has_attacked = self.player.use_potion() #returns true or false
    
      elif player_action == 2: #uses spell
        spell_choice = self.select_spell() #returns 0 (cancel spell) 1 (fireball) 2 (shield) 3 (mana drain)

        if spell_choice != 0: #if spell choice is 0 than has attacked remains False
          has_attacked = True #end move variable
          if spell_choice == 1 or spell_choice == 3 or spell_choice == 4: #checks for attacking spell
            target = self.choose_target()#returns number that is index of enemy in enemy list
            if self.player.cast_spell(spell_choice, self.enemies[target]): #returns true if character kills enemy (using fireball)
              self.kills += 1
              self.experienced_earned += 20
              
          else:
            self.player.cast_spell(spell_choice) #cast spell line 171 in character file
         
      else: #attacks enemy
        target = self.choose_target() #returns index of enemy from enemy list
        has_attacked = True

        if self.player.attack_enemy(self.enemies[target]):#returns true or false if enemy dies
          self.kills += 1
          self.experienced_earned += 15
    
      turn_over = True #variable that ends turn
      if not has_attacked: #if player has not made valid move
        turn_over = False
      else:      
        self.player_won = True #end game variable
        for enemy in self.enemies:#if at least one enemy alive player won variable false
          if enemy.health > 0:
            self.player_won = False
            break

        if self.player_won == True: #if player wins the game
          self.app.write("Your enemies have been vanquished!!")
          self.app.write("")
          time.sleep(1)
          self.wins += 1

  def do_enemy_actions(self):
    """ Performs the enemies' actions """

    enemies_choices = self.allies
    
    if not self.player_won: #checks if player has not killed all enemies
      self.app.write("Enemies' Turn:")
      self.app.write("")
      time.sleep(1)
    
      for enemy in self.enemies:
        if enemy.health > 0 and not self.player_lost:
          if not self.player_lost:
            chosen = False
            if random.randint(1,4) == 1:
              target = self.player
            else:
              while chosen == False:
                target = random.choice(enemies_choices)
                if target.health > 0:
                  chosen = True

            if target == self.player: 
              self.player_lost = enemy.move(self.player)
            else:
              enemy.move(target)
              if target.health <= 0:
                enemies_choices.remove(target)
              self.player_lost = False

      if self.player_lost == True: #checks if player is killed
        self.app.write("You have been killed by your enemies.")
        self.app.write("")
        time.sleep(1)

  def do_allies_actions(self):
    allies_choices = self.enemies

    if not self.player_won:
      self.app.write("Allies' Turn:")
      self.app.write("")
      time.sleep(1)
      for ally in self.allies:
        if ally.health > 0 and not self.player_won:
          if not self.player_won:
            while True:
              target = random.choice(allies_choices)
              if target.health > 0:
                break
              
            ally.move(target)
            self.player_won = True
            for player in allies_choices:
              if player.health > 0:
                self.player_won = False
                break

      if self.player_won == True: #if player wins the game
          self.app.write("Your enemies have been vanquished by your allies!!")
          self.app.write("")
          time.sleep(1)
          self.wins += 1
          
          
